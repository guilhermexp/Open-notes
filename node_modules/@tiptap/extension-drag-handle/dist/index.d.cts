import { ComputePositionConfig } from '@floating-ui/dom';
import { Editor, Extension } from '@tiptap/core';
import { Node } from '@tiptap/pm/model';
import { PluginKey, Plugin } from '@tiptap/pm/state';

declare const defaultComputePositionConfig: ComputePositionConfig;
interface DragHandleOptions {
    /**
     * Renders an element that is positioned with the floating-ui/dom package
     */
    render(): HTMLElement;
    /**
     * Configuration for position computation of the drag handle
     * using the floating-ui/dom package
     */
    computePositionConfig?: ComputePositionConfig;
    /**
     * Locks the draghandle in place and visibility
     */
    locked?: boolean;
    /**
     * Returns a node or null when a node is hovered over
     */
    onNodeChange?: (options: {
        node: Node | null;
        editor: Editor;
    }) => void;
}
declare module '@tiptap/core' {
    interface Commands<ReturnType> {
        dragHandle: {
            /**
             * Locks the draghandle in place and visibility
             */
            lockDragHandle: () => ReturnType;
            /**
             * Unlocks the draghandle
             */
            unlockDragHandle: () => ReturnType;
            /**
             * Toggle draghandle lock state
             */
            toggleDragHandle: () => ReturnType;
        };
    }
}
declare const DragHandle: Extension<DragHandleOptions, any>;

interface DragHandlePluginProps {
    pluginKey?: PluginKey | string;
    editor: Editor;
    element: HTMLElement;
    onNodeChange?: (data: {
        editor: Editor;
        node: Node | null;
        pos: number;
    }) => void;
    computePositionConfig?: ComputePositionConfig;
}
declare const dragHandlePluginDefaultKey: PluginKey<any>;
declare const DragHandlePlugin: ({ pluginKey, element, editor, computePositionConfig, onNodeChange, }: DragHandlePluginProps) => {
    unbind(): void;
    plugin: Plugin<{
        locked: boolean;
    }>;
};

export { DragHandle, type DragHandleOptions, DragHandlePlugin, type DragHandlePluginProps, DragHandle as default, defaultComputePositionConfig, dragHandlePluginDefaultKey };
