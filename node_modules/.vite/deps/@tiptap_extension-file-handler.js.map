{
  "version": 3,
  "sources": ["../../@tiptap/extension-file-handler/src/fileHandler.ts", "../../@tiptap/extension-file-handler/src/FileHandlePlugin.ts", "../../@tiptap/extension-file-handler/src/index.ts"],
  "sourcesContent": ["import { Extension } from '@tiptap/core'\nimport { PluginKey } from '@tiptap/pm/state'\n\nimport { FileHandlePlugin } from './FileHandlePlugin.js'\nimport type { FileHandlerOptions } from './types.js'\n\nexport const FileHandler = Extension.create<FileHandlerOptions>({\n  name: 'fileHandler',\n\n  addOptions() {\n    return {\n      onPaste: undefined,\n      onDrop: undefined,\n      allowedMimeTypes: undefined,\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      FileHandlePlugin({\n        key: new PluginKey(this.name),\n        editor: this.editor,\n        allowedMimeTypes: this.options.allowedMimeTypes,\n        onDrop: this.options.onDrop,\n        onPaste: this.options.onPaste,\n      }),\n    ]\n  },\n})\n", "import { Plugin, PluginKey } from '@tiptap/pm/state'\n\nimport type { FileHandlePluginOptions } from './types.js'\n\nexport const FileHandlePlugin = ({ key, editor, onPaste, onDrop, allowedMimeTypes }: FileHandlePluginOptions) => {\n  return new Plugin({\n    key: key || new PluginKey('fileHandler'),\n\n    props: {\n      handleDrop(_view, event) {\n        if (!onDrop) {\n          return false\n        }\n\n        if (!event.dataTransfer?.files.length) {\n          return false\n        }\n\n        const dropPos = _view.posAtCoords({\n          left: event.clientX,\n          top: event.clientY,\n        })\n\n        let filesArray = Array.from(event.dataTransfer.files)\n\n        if (allowedMimeTypes) {\n          filesArray = filesArray.filter(file => allowedMimeTypes.includes(file.type))\n        }\n\n        if (filesArray.length === 0) {\n          return false\n        }\n\n        event.preventDefault()\n        event.stopPropagation()\n\n        onDrop(editor, filesArray, dropPos?.pos || 0)\n\n        return true\n      },\n\n      handlePaste(_view, event) {\n        if (!onPaste) {\n          return false\n        }\n\n        if (!event.clipboardData?.files.length) {\n          return false\n        }\n\n        let filesArray = Array.from(event.clipboardData.files)\n        const htmlContent = event.clipboardData.getData('text/html')\n\n        if (allowedMimeTypes) {\n          filesArray = filesArray.filter(file => allowedMimeTypes.includes(file.type))\n        }\n\n        if (filesArray.length === 0) {\n          return false\n        }\n\n        event.preventDefault()\n        event.stopPropagation()\n\n        onPaste(editor, filesArray, htmlContent)\n\n        // if there is also file data inside the clipboard html,\n        // we won't use the files array and instead get the file url from the html\n        // this mostly happens for gifs or webms as they are not copied correctly as a file\n        // and will always be transformed into a PNG\n        // in this case we will let other extensions handle the incoming html via their inputRules\n        if (htmlContent.length > 0) {\n          return false\n        }\n\n        return true\n      },\n    },\n  })\n}\n", "import { FileHandler } from './fileHandler.js'\n\nexport * from './FileHandlePlugin.js'\nexport * from './types.js'\n\nexport { FileHandler }\n\nexport default FileHandler\n"],
  "mappings": ";;;;;;;;;;;;;;ACIO,IAAM,mBAAmB,CAAC,EAAE,KAAK,QAAQ,SAAS,QAAQ,iBAAiB,MAA+B;AAC/G,SAAO,IAAI,OAAO;IAChB,KAAK,OAAO,IAAI,UAAU,aAAa;IAEvC,OAAO;MACL,WAAW,OAAO,OAAO;AAT/B,YAAA;AAUQ,YAAI,CAAC,QAAQ;AACX,iBAAO;QACT;AAEA,YAAI,GAAC,KAAA,MAAM,iBAAN,OAAA,SAAA,GAAoB,MAAM,SAAQ;AACrC,iBAAO;QACT;AAEA,cAAM,UAAU,MAAM,YAAY;UAChC,MAAM,MAAM;UACZ,KAAK,MAAM;QACb,CAAC;AAED,YAAI,aAAa,MAAM,KAAK,MAAM,aAAa,KAAK;AAEpD,YAAI,kBAAkB;AACpB,uBAAa,WAAW,OAAO,CAAA,SAAQ,iBAAiB,SAAS,KAAK,IAAI,CAAC;QAC7E;AAEA,YAAI,WAAW,WAAW,GAAG;AAC3B,iBAAO;QACT;AAEA,cAAM,eAAe;AACrB,cAAM,gBAAgB;AAEtB,eAAO,QAAQ,aAAY,WAAA,OAAA,SAAA,QAAS,QAAO,CAAC;AAE5C,eAAO;MACT;MAEA,YAAY,OAAO,OAAO;AAzChC,YAAA;AA0CQ,YAAI,CAAC,SAAS;AACZ,iBAAO;QACT;AAEA,YAAI,GAAC,KAAA,MAAM,kBAAN,OAAA,SAAA,GAAqB,MAAM,SAAQ;AACtC,iBAAO;QACT;AAEA,YAAI,aAAa,MAAM,KAAK,MAAM,cAAc,KAAK;AACrD,cAAM,cAAc,MAAM,cAAc,QAAQ,WAAW;AAE3D,YAAI,kBAAkB;AACpB,uBAAa,WAAW,OAAO,CAAA,SAAQ,iBAAiB,SAAS,KAAK,IAAI,CAAC;QAC7E;AAEA,YAAI,WAAW,WAAW,GAAG;AAC3B,iBAAO;QACT;AAEA,cAAM,eAAe;AACrB,cAAM,gBAAgB;AAEtB,gBAAQ,QAAQ,YAAY,WAAW;AAOvC,YAAI,YAAY,SAAS,GAAG;AAC1B,iBAAO;QACT;AAEA,eAAO;MACT;IACF;EACF,CAAC;AACH;ADzEO,IAAM,cAAc,UAAU,OAA2B;EAC9D,MAAM;EAEN,aAAa;AACX,WAAO;MACL,SAAS;MACT,QAAQ;MACR,kBAAkB;IACpB;EACF;EAEA,wBAAwB;AACtB,WAAO;MACL,iBAAiB;QACf,KAAK,IAAIA,UAAU,KAAK,IAAI;QAC5B,QAAQ,KAAK;QACb,kBAAkB,KAAK,QAAQ;QAC/B,QAAQ,KAAK,QAAQ;QACrB,SAAS,KAAK,QAAQ;MACxB,CAAC;IACH;EACF;AACF,CAAC;AErBD,IAAO,gBAAQ;",
  "names": ["PluginKey"]
}
